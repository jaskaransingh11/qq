
#include <bits/stdc++.h>
using namespace std;
int out[100][4];
int flag=0;
void lone(int val,int r,int c,int pos)
{
	if(val!=0)
	{
		out[flag][0]=r;
		out[flag][1]=c;
		out[flag][2]=val;
		out[flag][3]=pos;
		flag++;
	}
}

int main() {
	int r,c,no,i,j;
	cin>>r>>c>>no;
	int arr[3][no];
	for (i=0;i<no;i++)
	{
		cin>>arr[0][i]>>arr[1][i]>>arr[2][i];
	}
	int initial[2];
	cin>>initial[0]>>initial[1];
	
	int farr[r][c]={0};
	for(i=0;i<r;i++)
	{
		for(j=0;j<c;j++)
		{
			farr[i][j]=0;
			
		}
		
	}
	
	for(i=0;i<no;i++)
	{
		
		{
			farr[arr[0][i]][arr[1][i]]=arr[2][i];
			
		}
	}
	//works

	
	int red=0;int d;
	lone(farr[initial[0]][initial[1]],initial[0],initial[1],1);
	for(i=1;i<100;i++)
	{
	    for(d=0;d<i;d++)
	    {
	        if(farr[initial[0]+i][initial[1]]>=0 && farr[initial[0]+i][initial[1]]<=1000)
	        {
	        	lone(farr[initial[0]+i][initial[1]],initial[0]+i,initial[1],1);
	        	
			}
			else
			{
				red++;break;
			}
		}if(red!=0)
		{
			break;
		}
		
		for(d=0;d<i;d++)
		{
			if(farr[initial[0]][initial[1]+i]>=0 && farr[initial[0]][initial[1]+i]<=1000)
			{
				lone(farr[initial[0]][initial[1]+i],initial[0],initial[1]+i,2);
			}
			else
			{
				red++;break;
			}
		}if(red!=0)
		{
			break;
		}
		for(d=0;d<i+1;d++)
		{
			if(farr[initial[0]-i][initial[1]]>=0 && farr[initial[0]-i][initial[1]]<=1000)
	        {
	        	lone(farr[initial[0]-i][initial[1]],initial[0]-i,initial[1],3);
	        	
			}
		else
			{
				red++;break;
			}
		}	if(red!=0)
		{
			break;
		}
		for(d=0;d<i+1;d++)
		{
			if(farr[initial[0]][initial[1]-i]>=0 && farr[initial[0]][initial[1]-i]<=1000)
			{
				lone(farr[initial[0]][initial[1]-i],initial[0],initial[1]-i,4);
			}
			else
			{
				red++;break;
			}
		}if(red!=0)
		{
			break;
		}
			
		
	    }
	    
//	    for(r=0;r<100;r++)
//	    {
//	        
//	    }
//	    for(u=0;u<100;u++)
//	    {
//	        
//	    }
//	    for(l=0;l<100;l++)
//	    {
//	        
//	    }
		for(i=0;i<flag;i++)
	{
		for(j=0;j<4;j++)
		{
			cout<<out[i][j];
			
		}
		cout<<endl;}
	
	
	return 0;
	
}

